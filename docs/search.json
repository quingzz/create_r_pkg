[
  {
    "objectID": "index.html#create-new-r-package",
    "href": "index.html#create-new-r-package",
    "title": "mybook",
    "section": "0.1 Create new R package",
    "text": "0.1 Create new R package\n\n0.1.1 Steps\n\nGo to Files > New Project…\nSelect New Directory > R Package\nFill in Package name\nTick Create a git repository\nClick Create Project\n\n\n\n\n\n\n\nA typical R package structure\n\n\n\n\n\n\nDemo: create new package\n\n\n\n0.1.2 Post creation\n\nInstall usethis and devtools\nGenerate a license for your package:\n\nOpen-source: run usethis::use_mit_license(copyright_holder=NULL) in RStudio Console\nProprietary: usethis::use_proprietary_license(copyright_holder) in RStudio Console\nOther license options…\n\nGenerate a read me file: run usethis::use_readme_rmd() in RStudio Console\n(optional) Update information inside the DESCRIPTION file. Some fields of interest:\n\nTitle: what the package does\nDescription: more detailed information about the package (in one paragraph)\nDepends: list of package’s dependencies for core functions (your package require these external packages to work)\nSuggest: list of package’s dependencies for development tasks or optional functions (for example: packages used for testing)\nAuthors: list of package’s authors. Read Author section for the format.\n\n(optional) Upload to Github\n\nCreate a new repository on Github\nOpen Terminal (To open Terminal in R studio, click Tools > Terminal > New Terminal )\nRun the following snippet in RStudio Terminal (replace {link to repo} with your repo link)\n\ngit add .\ngit commit -m \"Initial commit\"\ngit remote add origin {link to repo}                        \ngit branch -M main\ngit push -u origin main\n\nDemo upload github"
  },
  {
    "objectID": "index.html#writing-the-first-function",
    "href": "index.html#writing-the-first-function",
    "title": "mybook",
    "section": "0.2 Writing the first function",
    "text": "0.2 Writing the first function\n\n0.2.1 Write it\n\nCreate a file to place your function into. The file must be created in R folder with the naming convention: function_name.R. To create the file, there are 2 options:\n\nUse RStudio to navigate to R folder and click New Blank File > R Script\nRun usethis::use_r(\"filename\") in Console\n\nDefine a function\n\nExample: Create a square.R that contains the following snippet\n\nsquare <- function(x) {\n  return(x * x)\n}\n\n\n\n0.2.2 Document it\n\nInstall roxygen2\nGenerate and update the roxygen documentation on top of the function. (Refer to demo video)\nRun roxygen2::roxygenise() or devtools::document() to generate documents.\n\n\n#' Square a number \n#' \n#' Takes a number x and returns its square, x * x. \n#' \n#' @param x A numeric value to be squared. \n#' @return The square of x. \n#' @examples \n#' square(2) \n#' square(-5.7) \n#' \n#' @export \nsquare <- function(x) { \n  return(x * x) \n}\n\nDemo: how to generate roxygen skeleton\n\n\n\n\n\n\n\nTrouble shooting NAMESPACE\n\n\n\nIf roxygen2::roxygenise() prints out the following message\n✖ Skipping NAMESPACE It already exists and was not generated by roxygen2.\ndelete the current NAMESPACE file and rerun the command\n\n\n\n\n0.2.3 Caveat (ﾉ◕ヮ◕)ﾉ*:･ﾟ✧\nReuse built-in function names instead of creating new ones\nSome reusable function names: plot, print, toString\nTo reuse function name:\n\nModify original function to add class to it\nWrite a custom function for your class\n\nExample: overriding plot function for class square\n\nsquare <- function(x) {\n  out <- x * x \n  class(out) <- \"square\" # tell R that ouptut is of class \"square\"\n  return(out)\n}\n\n# --- Override plot function\nplot.square <- function(x, ...) {\n  plot(c(1:length(x)), x, xlab = \"x\", ylab = \"Square of x\", ...)\n}\n\n# --- Test the new plot function \ny <- square(c(1,2,3,4,5,6,7,8,9,10))\nplot(y)"
  },
  {
    "objectID": "index.html#set-up-quality-control",
    "href": "index.html#set-up-quality-control",
    "title": "mybook",
    "section": "0.3 Set up quality control",
    "text": "0.3 Set up quality control\n\n0.3.1 Unit testing\nMakes sure your functions work as expected.\n\nInstall devtools, usethis\nCreate a test: run usethis::use_test(\"test_name\") in RStudio Console. This would create a file named \"test-test_name.R\" under tests/testthat folder\n\nExample: unit test for square function\n\nlibrary(testthat)\ntest_that(\"square(3) returns 9\", {\n  # --- Define expected output\n  expected <- 9\n  class(expected) <- \"square\" \n  # --- Test function\n  actual <-  square(3)\n  expect_equal(actual, expected)\n})\n\nTest passed 🥳\n\n\n\n\n\n\n\n\nTip\n\n\n\nRun devtools::test() in R to run all tests in package\n\n\n\n\n0.3.2 Code coverage\nView coverage report locally\n\nInstall covr\nRun covr::report()\n\nShow your test coverage on Github\n\nImport devtools and covr\nPush your package to GitHub\nRun use_coverage(type = c(\"codecov\"))\nRun use_github_action(\"test-coverage\")\nLogin http://codecov.io and get your repo’s token\nRun codecov(token = \"YOUR_TOKEN_HERE\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n0.3.3 Automatic R CMD check\nTest your package locally\nRun devtools::check() in R console to test the package\nEnsure your changes doesn’t cause the package to failed to build.\n\nRe-knit readme: devtools::build_readme()\nRun:\n\nusethis::use_github_action_check_standard(\n  save_as = \"R-CMD-check.yaml\",\n  ref = NULL, ignore = TRUE, open = FALSE)"
  },
  {
    "objectID": "index.html#package-down",
    "href": "index.html#package-down",
    "title": "mybook",
    "section": "0.4 Package down",
    "text": "0.4 Package down\nShare your package with the world 🌎.\n\nInstall pkgdown\nRun usethis::use_pkgdown()\nRun usethis::use_pkgdown_github_pages()\nCreate an empty branch for hosting your page.\n\nRun the following snippet in Terminal\nTo open Terminal in R studio, click Tools > Terminal > New Terminal\n\n\n\ngit checkout --orphan gh-pages     \ngit rm -rf .     \ngit commit --allow-empty -m 'Initial gh-pages commit'    \ngit push origin gh-pages     \ngit checkout master"
  },
  {
    "objectID": "index.html#additional-materials",
    "href": "index.html#additional-materials",
    "title": "mybook",
    "section": "0.5 Additional materials",
    "text": "0.5 Additional materials\n\n0.5.1 Cheatsheet\n\n Download cheatsheet"
  },
  {
    "objectID": "index.html#releasing-to-cran",
    "href": "index.html#releasing-to-cran",
    "title": "mybook",
    "section": "0.6 Releasing to CRAN",
    "text": "0.6 Releasing to CRAN\n\n0.6.1 Release workflow\nThe most concrete expression of the release process is the checklist produced by usethis::use_release_issue(), which opens a GitHub issue containing a list of todo’s.\n\n  \n    The generated checklist would include the following\n  \nFirst release:\n\n usethis::use_news_md()\n usethis::use_cran_comments()\n Update (aspirational) install instructions in README\n Proofread Title: and Description:\n Check that all exported functions have @return and @examples\n Check that Authors@R: includes a copyright holder (role ‘cph’)\n Check licensing of included files\n Review https://github.com/DavisVaughan/extrachecks\n\nPrepare for release:\n\n git pull\n urlchecker::url_check()\n devtools::build_readme()\n devtools::check(remote = TRUE, manual = TRUE)\n devtools::check_win_devel()\n git push\n\nSubmit to CRAN:\n\n usethis::use_version('patch')\n devtools::submit_cran()\n Approve email\n\nWait for CRAN...\n\n Accepted 🎉\n usethis::use_github_release()\n usethis::use_dev_version(push = TRUE)\n usethis::use_news_md()\n\n\n\n\n0.6.2 Caveats\nAbout DESCRIPTION file\n\nAuthor list: if part of your code is derived, copied from other sources, the authors of such code must be included in Author field with ‘ctb’ (contributor) role\nDescription section:\n\nWhen functions are mentioned, make sure it follows the format function_name()\nWhen packages or software names are mentioned, make sure to place them in single quotes ('package_name')\nWhen refer to publication titles, make sure to place them in double quotes (\"publication title\")\n\n\nAbout LICENSE file\n\nGithub vs CRAN LICENSE file: since LICENSE file for Github and CRAN follows different formats, a work around is to have a LICENSE.md file for Github and a LICENSE file for CRAN (make sure LICENSE.md is in included in .Rbuildignore). This is usually automatically handled when LICENSE is generated by usethis::use_{license_name}_license()\n\n  \n    LICENSE format for Github\n  \n\n# MIT License\n\nCopyright (c) 2024 demoPkg authors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n</details>\n\n  \n    LICENSE format for CRAN\n  \n\nYEAR: 2024\nCOPYRIGHT HOLDER: demoPkg authors\n\n</details>"
  },
  {
    "objectID": "index.html#example-package",
    "href": "index.html#example-package",
    "title": "mybook",
    "section": "0.7 Example package",
    "text": "0.7 Example package\nThe package used for this tutorial is available at Github"
  },
  {
    "objectID": "index.html#resources",
    "href": "index.html#resources",
    "title": "mybook",
    "section": "0.8 Resources",
    "text": "0.8 Resources\nA sample R package: https://thinhong.github.io/denim/﻿\nPopular R packages: https://tidyverse.tidyverse.org/\nThorough guide to R package development: https://r-pkgs.org\n“Advanced R” book: https://adv-r.hadley.nz/﻿”\n“R for data science” book : https://r4ds.had.co.nz/\n﻿Explore syntax for function documentation: https://roxygen2.r-lib.org/articles/roxygen2.html"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Create R Package",
    "section": "",
    "text": "You will learn to\n\n\n\n\nCreate a new R package\nWriting the first function\nSetup quality control\nCreate github page for package using pkgdown\nWorkflow for publishing package to CRAN"
  },
  {
    "objectID": "create_r_package.html#create-new-r-package",
    "href": "create_r_package.html#create-new-r-package",
    "title": "2  Build your first R package",
    "section": "2.1 Create new R package",
    "text": "2.1 Create new R package\n\n2.1.1 Steps\n\nGo to Files > New Project…\nSelect New Directory > R Package\nFill in Package name\nTick Create a git repository\nClick Create Project\n\n\n\n\n\n\n\nA typical R package structure\n\n\n\n\n\n\nDemo: create new package\n\n\n\n2.1.2 Post creation\n\nInstall usethis and devtools\nGenerate a license for your package:\n\nOpen-source: run usethis::use_mit_license(copyright_holder=NULL) in RStudio Console\nProprietary: usethis::use_proprietary_license(copyright_holder) in RStudio Console\nOther license options…\n\nGenerate a read me file: run usethis::use_readme_rmd() in RStudio Console\n(optional) Update information inside the DESCRIPTION file. Some fields of interest:\n\nTitle: what the package does\nDescription: more detailed information about the package (in one paragraph)\nDepends: list of package’s dependencies for core functions (your package require these external packages to work)\nSuggest: list of package’s dependencies for development tasks or optional functions (for example: packages used for testing)\nAuthors: list of package’s authors. Read Author section for the format.\n\n(optional) Upload to Github\n\nCreate a new repository on Github\nOpen Terminal (To open Terminal in R studio, click Tools > Terminal > New Terminal )\nRun the following snippet in RStudio Terminal (replace {link to repo} with your repo link)\n\ngit add .\ngit commit -m \"Initial commit\"\ngit remote add origin {link to repo}                        \ngit branch -M main\ngit push -u origin main\n\nDemo upload github"
  },
  {
    "objectID": "create_r_package.html#writing-the-first-function",
    "href": "create_r_package.html#writing-the-first-function",
    "title": "2  Build your first R package",
    "section": "2.2 Writing the first function",
    "text": "2.2 Writing the first function\n\n2.2.1 Write it\n\nCreate a file to place your function into. The file must be created in R folder with the naming convention: function_name.R. To create the file, there are 2 options:\n\nUse RStudio to navigate to R folder and click New Blank File > R Script\nRun usethis::use_r(\"filename\") in Console\n\nDefine a function\n\nExample: Create a square.R that contains the following snippet\n\nsquare <- function(x) {\n  return(x * x)\n}\n\n\n\n2.2.2 Document it\n\nInstall roxygen2\nGenerate and update the roxygen documentation on top of the function. (Refer to demo video)\nRun roxygen2::roxygenise() or devtools::document() to generate documents.\n\n\n#' Square a number \n#' \n#' Takes a number x and returns its square, x * x. \n#' \n#' @param x A numeric value to be squared. \n#' @return The square of x. \n#' @examples \n#' square(2) \n#' square(-5.7) \n#' \n#' @export \nsquare <- function(x) { \n  return(x * x) \n}\n\nDemo: how to generate roxygen skeleton\n\n\n\n\n\n\n\nTrouble shooting NAMESPACE\n\n\n\nIf roxygen2::roxygenise() prints out the following message\n✖ Skipping NAMESPACE It already exists and was not generated by roxygen2.\ndelete the current NAMESPACE file and rerun the command\n\n\n\n\n2.2.3 Caveat (ﾉ◕ヮ◕)ﾉ*:･ﾟ✧\nReuse built-in function names instead of creating new ones\nSome reusable function names: plot, print, toString\nTo reuse function name:\n\nModify original function to add class to it\nWrite a custom function for your class\n\nExample: overriding plot function for class square\n\nsquare <- function(x) {\n  out <- x * x \n  class(out) <- \"square\" # tell R that ouptut is of class \"square\"\n  return(out)\n}\n\n# --- Override plot function\nplot.square <- function(x, ...) {\n  plot(c(1:length(x)), x, xlab = \"x\", ylab = \"Square of x\", ...)\n}\n\n# --- Test the new plot function \ny <- square(c(1,2,3,4,5,6,7,8,9,10))\nplot(y)"
  },
  {
    "objectID": "create_r_package.html#set-up-quality-control",
    "href": "create_r_package.html#set-up-quality-control",
    "title": "2  Build your first R package",
    "section": "2.3 Set up quality control",
    "text": "2.3 Set up quality control\n\n2.3.1 Unit testing\nMakes sure your functions work as expected.\n\nInstall devtools, usethis\nCreate a test: run usethis::use_test(\"test_name\") in RStudio Console. This would create a file named \"test-test_name.R\" under tests/testthat folder\n\nExample: unit test for square function\n\nlibrary(testthat)\ntest_that(\"square(3) returns 9\", {\n  # --- Define expected output\n  expected <- 9\n  class(expected) <- \"square\" \n  # --- Test function\n  actual <-  square(3)\n  expect_equal(actual, expected)\n})\n\nTest passed 🥳\n\n\n\n\n\n\n\n\nTip\n\n\n\nRun devtools::test() in R to run all tests in package\n\n\n\n\n2.3.2 Code coverage\nView coverage report locally\n\nInstall covr\nRun covr::report()\n\nShow your test coverage on Github\n\nImport devtools and covr\nPush your package to GitHub\nRun use_coverage(type = c(\"codecov\"))\nRun use_github_action(\"test-coverage\")\nLogin http://codecov.io and get your repo’s token\nRun codecov(token = \"YOUR_TOKEN_HERE\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2.3.3 Automatic R CMD check\nTest your package locally\nRun devtools::check() in R console to test the package\nEnsure your changes doesn’t cause the package to failed to build.\n\nRe-knit readme: devtools::build_readme()\nRun:\n\nusethis::use_github_action_check_standard(\n  save_as = \"R-CMD-check.yaml\",\n  ref = NULL, ignore = TRUE, open = FALSE)"
  },
  {
    "objectID": "create_r_package.html#package-down",
    "href": "create_r_package.html#package-down",
    "title": "2  Build your first R package",
    "section": "2.4 Package down",
    "text": "2.4 Package down\nShare your package with the world 🌎.\n\nInstall pkgdown\nRun usethis::use_pkgdown()\nRun usethis::use_pkgdown_github_pages()\nCreate an empty branch for hosting your page.\n\nRun the following snippet in Terminal\nTo open Terminal in R studio, click Tools > Terminal > New Terminal\n\n\n\ngit checkout --orphan gh-pages     \ngit rm -rf .     \ngit commit --allow-empty -m 'Initial gh-pages commit'    \ngit push origin gh-pages     \ngit checkout master"
  },
  {
    "objectID": "create_r_package.html#additional-materials",
    "href": "create_r_package.html#additional-materials",
    "title": "2  Build your first R package",
    "section": "2.5 Additional materials",
    "text": "2.5 Additional materials\n\n2.5.1 Cheatsheet\n\n Download cheatsheet"
  },
  {
    "objectID": "create_r_package.html#releasing-to-cran",
    "href": "create_r_package.html#releasing-to-cran",
    "title": "2  Build your first R package",
    "section": "2.6 Releasing to CRAN",
    "text": "2.6 Releasing to CRAN\n\n2.6.1 Release workflow\nThe most concrete expression of the release process is the checklist produced by usethis::use_release_issue(), which opens a GitHub issue containing a list of todo’s.\n\n  \n    The generated checklist would include the following\n  \nFirst release:\n\n usethis::use_news_md()\n usethis::use_cran_comments()\n Update (aspirational) install instructions in README\n Proofread Title: and Description:\n Check that all exported functions have @return and @examples\n Check that Authors@R: includes a copyright holder (role ‘cph’)\n Check licensing of included files\n Review https://github.com/DavisVaughan/extrachecks\n\nPrepare for release:\n\n git pull\n urlchecker::url_check()\n devtools::build_readme()\n devtools::check(remote = TRUE, manual = TRUE)\n devtools::check_win_devel()\n git push\n\nSubmit to CRAN:\n\n usethis::use_version('patch')\n devtools::submit_cran()\n Approve email\n\nWait for CRAN...\n\n Accepted 🎉\n usethis::use_github_release()\n usethis::use_dev_version(push = TRUE)\n usethis::use_news_md()\n\n\n\n\n2.6.2 Caveats\nAbout DESCRIPTION file\n\nAuthor list: if part of your code is derived, copied from other sources, the authors of such code must be included in Author field with ‘ctb’ (contributor) role\nDescription section:\n\nWhen functions are mentioned, make sure it follows the format function_name()\nWhen packages or software names are mentioned, make sure to place them in single quotes ('package_name')\nWhen refer to publication titles, make sure to place them in double quotes (\"publication title\")\n\n\nAbout LICENSE file\n\nGithub vs CRAN LICENSE file: since LICENSE file for Github and CRAN follows different formats, a work around is to have a LICENSE.md file for Github and a LICENSE file for CRAN (make sure LICENSE.md is in included in .Rbuildignore). This is usually automatically handled when LICENSE is generated by usethis::use_{license_name}_license()\n\n  \n    LICENSE format for Github\n  \n\n# MIT License\n\nCopyright (c) 2024 demoPkg authors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n</details>\n\n  \n    LICENSE format for CRAN\n  \n\nYEAR: 2024\nCOPYRIGHT HOLDER: demoPkg authors\n\n</details>"
  },
  {
    "objectID": "create_r_package.html#example-package",
    "href": "create_r_package.html#example-package",
    "title": "2  Build your first R package",
    "section": "2.7 Example package",
    "text": "2.7 Example package\nThe package used for this tutorial is available at Github"
  },
  {
    "objectID": "create_r_package.html#resources",
    "href": "create_r_package.html#resources",
    "title": "2  Build your first R package",
    "section": "2.8 Resources",
    "text": "2.8 Resources\nA sample R package: https://thinhong.github.io/denim/﻿\nPopular R packages: https://tidyverse.tidyverse.org/\nThorough guide to R package development: https://r-pkgs.org\n“Advanced R” book: https://adv-r.hadley.nz/﻿”\n“R for data science” book : https://r4ds.had.co.nz/\n﻿Explore syntax for function documentation: https://roxygen2.r-lib.org/articles/roxygen2.html"
  }
]