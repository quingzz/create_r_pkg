---
title: "Build your first R package"
---

## Create new R package

### Steps

-   Go to **`Files` \> `New Projectâ€¦`**

-   Select **`New Directory` \> `R Package`**

-   Fill in **`Package name`**

-   Tick **`Create a git repository`**

-   Click **`Create Project`**

::: callout-tip
#### A typical R package structure {.callout-tip}

![](img/package_structure.png){width="295"}
:::

***Demo***: create new package

{{< video img/create_pkg.mp4 >}}

### Post creation

-   Install `usethis` and `devtools`

-   Generate a license for your package:

    -   Open-source: run `usethis::use_mit_license(copyright_holder=NULL)` in RStudio `Console`

    -   Proprietary: `usethis::use_proprietary_license(copyright_holder)` in RStudio `Console`

    -   Other [license options](https://usethis.r-lib.org/reference/licenses.html#ref-usage)...

-   Generate a read me file: run `usethis::use_readme_rmd()` in RStudio `Console`

-   (optional) Update information inside the `DESCRIPTION` file. Some fields of interest:

    -   `Title`: what the package does

    -   `Description`: more detailed information about the package (in one paragraph)

    -   `Depends`: list of package's dependencies for core functions (your package **require** these external packages to work)

    -   `Suggest`: list of package's dependencies for development tasks or optional functions (for example: packages used for testing)

    -   `Authors`: list of package's authors. Read [`Author`](https://r-pkgs.org/description.html#sec-description-authors-at-r) section for the format.

-   (optional) Upload to Github

    -   Create a new repository on Github

    -   Open `Terminal` (To open Terminal in R studio, click `Tools` \> `Terminal` \> `New Terminal` )

    -   Run the following snippet in RStudio `Terminal` (replace {link to repo} with your repo link)

        ```{bash, eval = F}
        git add .
        git commit -m "Initial commit"
        git remote add origin {link to repo}                        
        git branch -M main
        git push -u origin main
        ```

    -   Demo upload github {{< video img/upload_to_github.mp4 >}}

## Writing the first function

### Write it

-   Create a file to place your function into. The file must be created in R folder with the naming convention: `function_name.R`. To create the file, there are 2 options:
    -   Use RStudio to navigate to `R` folder and click `New Blank File` \> `R Script`
    -   Run `usethis::use_r("filename")` in `Console`
-   Define a function

Example: Create a `square.R` that contains the following snippet

```{r}
square <- function(x) {
  return(x * x)
}
```

### Document it

-   Install `roxygen2`

-   Generate and update the roxygen documentation on top of the function. (Refer to demo video)

-   Run `roxygen2::roxygenise()` or `devtools::document()` to generate documents.

```{r}
#' Square a number 
#' 
#' Takes a number x and returns its square, x * x. 
#' 
#' @param x A numeric value to be squared. 
#' @return The square of x. 
#' @examples 
#' square(2) 
#' square(-5.7) 
#' 
#' @export 
square <- function(x) { 
  return(x * x) 
}
```

***Demo***: how to generate roxygen skeleton

{{< video img/create_roxygen.mp4 >}}

::: callout-important
## Trouble shooting NAMESPACE

If `roxygen2::roxygenise()` prints out the following message

`âœ– Skipping NAMESPACE It already exists and was not generated by roxygen2.`

delete the current NAMESPACE file and rerun the command
:::

### Caveat (ï¾‰â—•ãƒ®â—•)ï¾‰\*:ï½¥ï¾Ÿâœ§

Reuse built-in function names instead of creating new ones

Some reusable function names: `plot`, `print`, `toString`

To reuse function name:

-   Modify original function to add class to it

-   Write a custom function for your class

Example: overriding `plot` function for class `square`

```{r}
square <- function(x) {
  out <- x * x 
  class(out) <- "square" # tell R that ouptut is of class "square"
  return(out)
}

# --- Override plot function
plot.square <- function(x, ...) {
  plot(c(1:length(x)), x, xlab = "x", ylab = "Square of x", ...)
}

# --- Test the new plot function 
y <- square(c(1,2,3,4,5,6,7,8,9,10))
plot(y)
```

## Set up quality control

### Unit testing

**Makes sure your functions work as expected.**

-   Install `devtools`, `usethis`

-   Create a test: run `usethis::use_test("test_name")` in RStudio `Console`. This would create a file named `"test-test_name.R"` under `tests/testthat` folder

Example: unit test for `square` function

```{r, warning=F}
library(testthat)
test_that("square(3) returns 9", {
  # --- Define expected output
  expected <- 9
  class(expected) <- "square" 
  # --- Test function
  actual <-  square(3)
  expect_equal(actual, expected)
})
```

::: callout-tip
Run `devtools::test()` in R to run all tests in package
:::

### Code coverage

**View coverage report locally**

-   Install `covr`

-   Run `covr::report()`

**Show your test coverage on Github**

-   ImportÂ `devtools` and `covr`

-   Push your package to GitHub

-   RunÂ `use_coverage(type = c("codecov"))`

-   RunÂ `use_github_action("test-coverage")`

-   LoginÂ [http://codecov.io](http://codecov.io/) and get your repo's token

-   RunÂ `codecov(token = "YOUR_TOKEN_HERE")`

::: callout-tip
#### ![](img/codecov.png){width="234"} {.callout-tip}
:::

### Automatic R CMD check

**Test your package locally**

Run `devtools::check()` in R console to test the package

**Ensure your changes doesn't cause the package to failed to build.**

-   Re-knit readme:Â `devtools::build_readme()`

-   Run:

    ```{r, eval=FALSE}
    usethis::use_github_action_check_standard(
      save_as = "R-CMD-check.yaml",
      ref = NULL, ignore = TRUE, open = FALSE)

    ```

::: callout-tip
#### ![](img/r-cmd-check.png){width="258"} {.callout-tip}
:::

## Package down

**Share your package with the world ðŸŒŽ.**

-   InstallÂ `pkgdown`

-   RunÂ `usethis::use_pkgdown()`

-   Run `usethis::use_pkgdown_github_pages()`

-   Create an empty branch for hosting your page.

    -   Run the following snippet in Terminal
    -   To open Terminal in R studio, click `Tools` \> `Terminal` \> `New Terminal`

```{bash, eval=F}
git checkout --orphan gh-pages     
git rm -rf .     
git commit --allow-empty -m 'Initial gh-pages commit'    
git push origin gh-pages     
git checkout master
```

## Additional materials

### Cheatsheet

::: center-text
[{{< fa link >}} Download cheatsheet](https://www.google.com/url?sa=t&source=web&rct=j&opi=89978449&url=https://raw.githubusercontent.com/rstudio/cheatsheets/main/package-development.pdf&ved=2ahUKEwjQwtichsSFAxXpia8BHeHNBVQQFnoECA4QAQ&usg=AOvVaw3UgPwTq5Q0kZ1KhurRj__k){.btn .btn-outline-secondary role="button"}
:::

![](img/cheatsheet.png){width="701"}

## Releasing to CRAN

### Release workflow

The most concrete expression of the release process is the checklist produced by [`usethis::use_release_issue()`](https://usethis.r-lib.org/reference/use_release_issue.html), which opens a GitHub issue containing a list of todo's.

```{=html}
<details>
  <summary>
    The generated checklist would include the following
  </summary>
```
First release:

-   [ ] Â `usethis::use_news_md()`

-   [ ] Â `usethis::use_cran_comments()`

-   [ ] Â Update (aspirational) install instructions in README

-   [ ] Â ProofreadÂ `Title:`Â andÂ `Description:`

-   [ ] Â Check that all exported functions haveÂ `@return`Â andÂ `@examples`

-   [ ] Â Check thatÂ `Authors@R:`Â includes a copyright holder (role 'cph')

-   [ ] Â CheckÂ [licensing of included files](https://r-pkgs.org/license.html#sec-code-you-bundle)

-   [ ] Â ReviewÂ <https://github.com/DavisVaughan/extrachecks>

Prepare for release:

-   [ ] Â `git pull`

-   [ ] Â `urlchecker::url_check()`

-   [ ] Â `devtools::build_readme()`

-   [ ] Â `devtools::check(remote = TRUE, manual = TRUE)`

-   [ ] Â `devtools::check_win_devel()`

-   [ ] Â `git push`

Submit to CRAN:

-   [ ] Â `usethis::use_version('patch')`

-   [ ] Â `devtools::submit_cran()`

-   [ ] Â Approve email

Wait for CRAN\...

-   [ ] Â Accepted ðŸŽ‰

-   [ ] Â `usethis::use_github_release()`

-   [ ] Â `usethis::use_dev_version(push = TRUE)`

-   [ ] Â `usethis::use_news_md()`

</details>

### Caveats

**About DESCRIPTION file**

-   `Author` list: if part of your code is derived, copied from other sources, the authors of such code must be included in Author field with 'ctb' (contributor) role

-   `Description` section:

    -   When functions are mentioned, make sure it follows the format `function_name()`

    -   When packages or software names are mentioned, make sure to place them in single quotes (`'package_name'`)

    -   When refer to publication titles, make sure to place them in double quotes (`"publication title"`)

**About LICENSE file**

-   **Github** vs **CRAN** `LICENSE` file: since `LICENSE` file for Github and CRAN follows different formats, a work around is to have a `LICENSE.md` file for Github and a `LICENSE` file for CRAN (make sure `LICENSE.md` is in included in `.Rbuildignore`). This is usually automatically handled when LICENSE is generated by `usethis::use_{license_name}_license()`

    ```{=html}
    <details>
      <summary>
        LICENSE format for Github
      </summary>
    ```
    ```{markdown}
    # MIT License

    Copyright (c) 2024 demoPkg authors

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.

    ```

    \</details\>

    ```{=html}
    <details>
      <summary>
        LICENSE format for CRAN
      </summary>
    ```
    ```{markdown}
    YEAR: 2024
    COPYRIGHT HOLDER: demoPkg authors
    ```

    \</details\>

## Example package

The package used for this tutorial is available at [Github](https://github.com/quingzz/demoPkg)

## Resources

A sample R package: <https://thinhong.github.io/denim/>ï»¿

Popular R packages: <https://tidyverse.tidyverse.org/>

Thorough guide to R package development: <https://r-pkgs.org>

"Advanced R" book: <https://adv-r.hadley.nz/>ï»¿"

"R for data science" book : <https://r4ds.had.co.nz/>

ï»¿Explore syntax for function documentation: <https://roxygen2.r-lib.org/articles/roxygen2.html>ï»¿
